import Gaffer
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 55, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferScene.ScenePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferScene.ScenePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["create_sets"] = Gaffer.StringPlug( "create_sets", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["create_sets"] )
__children["in"] = GafferScene.ScenePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["out"] = GafferScene.ScenePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["prefix"] = Gaffer.StringPlug( "prefix", defaultValue = 'surf:', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["prefix"] )
__children["attribute"] = Gaffer.StringPlug( "attribute", defaultValue = 'surfacing_object', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["attribute"] )
__children["clear_box"] = Gaffer.StringPlug( "clear_box", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["clear_box"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 10.2742472, 479.144226 ) )
__children["BoxOut"]["in"].setInput( __children["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 8.29483604, -3.46790957 ) )
Gaffer.Metadata.registerValue( __children["create_sets"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["create_sets"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["create_sets"], 'plugValueWidget:type', 'GafferUI.ButtonPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["create_sets"], 'buttonPlugValueWidget:clicked', 'import Gaffer\nimport GafferScene\nimport GafferUI\nimport IECore\n\nimport ldtgaffer\nreload(ldtgaffer)\nscriptWindow = button.ancestor(GafferUI.ScriptWindow)\nroot = scriptWindow.scriptNode()\nnodeUI = button.ancestor(GafferUI.NodeUI)\n\nscene_node = nodeUI.node()\nscene_node_in = scene_node[\'in\']\n\npath = \'/\'\nobject_attribute = scene_node["attribute"]\nsets_prefix = scene_node["prefix"]\nhio = ldtgaffer.AttributesSearch(\n    scene_node_in, path, object_attribute.getValue())\n\nsetNodes = {}\n\nfor n, attribute in enumerate(hio.attributes.keys()):\n    setNodes[n] = GafferScene.Set(attribute)\n    setNodes[n]["name"].setValue(sets_prefix.getValue() + attribute)\n    scene_node.addChild(setNodes[n])\n    FilterNode = GafferScene.PathFilter(attribute)\n    setNodes[n]["filter"].setInput(FilterNode["out"])\n    FilterNode["paths"].setValue(\n        IECore.StringVectorData(hio.attributes[attribute]))\n    scene_node.addChild(FilterNode)\n    if n == 0:\n        print "first", attribute\n        setNodes[n]["in"].setInput(scene_node["BoxIn"]["out"])\n    elif n == len(hio.attributes.keys())-1:\n        print "last", attribute\n        setNodes[n]["in"].setInput(setNodes[n-1]["out"])\n        scene_node["BoxOut"]["in"].setInput(setNodes[n]["out"])\n    else:\n        setNodes[n]["in"].setInput(setNodes[n-1]["out"])\n' )
Gaffer.Metadata.registerValue( __children["create_sets"], 'description', '' )
Gaffer.Metadata.registerValue( __children["create_sets"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The processed output scene.' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:color', imath.Color3f( 0.240099996, 0.339399993, 0.485000014 ) )
Gaffer.Metadata.registerValue( __children["out"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["out"], 'labelPlugValueWidget:renameable', True )
Gaffer.Metadata.registerValue( __children["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["prefix"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["prefix"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["prefix"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["attribute"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["attribute"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["attribute"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["clear_box"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["clear_box"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["clear_box"], 'plugValueWidget:type', 'GafferUI.ButtonPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["clear_box"], 'buttonPlugValueWidget:clicked', 'import Gaffer\nimport GafferScene\nimport GafferUI\nimport IECore\n\nimport ldtgaffer\nscriptWindow = button.ancestor(GafferUI.ScriptWindow)\nroot = scriptWindow.scriptNode()\nnodeUI = button.ancestor(GafferUI.NodeUI)\n\nscene_node = nodeUI.node()\nscene_node_in = scene_node[\'in\']\n\nfor each in scene_node.keys():\n    node_type = str(type(scene_node[each]))\n    if not \'Plug\' in node_type and not \'Box\' in node_type:\n        scene_node.removeChild(scene_node[each])\n\nscene_node["BoxOut"]["in"].setInput(scene_node["BoxIn"]["out"])\nscene_node["BoxOut"]["passThrough"].setInput(scene_node["BoxIn"]["out"])' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', 'A container for "subgraphs" - node networks which exist inside the\nBox and can be exposed by promoting selected internal plugs onto the\noutside of the Box.\n\nBoxes can be used as an organisational tool for simplifying large\ngraphs by collapsing them into sections which perform distinct tasks.\nThey are also used for authoring files to be used with the Reference\nnode.children' )
Gaffer.Metadata.registerValue( parent, 'layout:section:Node:summary', '' )


del __children

